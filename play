#!/usr/bin/env python3
# coding: utf-8
import os
import itertools
import unicodedata
import quodlibet.library
from shutil import get_terminal_size


def load():
    return quodlibet.library.init(os.path.expanduser('~/.config/quodlibet/songs'))


def matches(song, terms):
    for term in terms:
        for field in ['title', 'artist', 'album']:
            if field in song and term.lower() in song[field].lower():
                break
        else:
            return False
    return True


def search(s):
    try:
        import shlex

        terms = [t for t in shlex.split(s) if t != '']
    except Exception:
        terms = [t for t in s.split(' ') if t != '']
    for song in songs:
        if matches(song, terms):
            yield song


def ulen(text):
    length = len(text)
    for c in text:
        if unicodedata.east_asian_width(c) in 'WF':
            length += 1
    return length


def usubstr(text, limit):
    used = 0
    for i, c in enumerate(text):
        if unicodedata.east_asian_width(c) in 'WF':
            used += 2
        else:
            used += 1
        if used > limit:
            return text[:i]
    return text[:limit]


def uljust(text, limit):
    return text + (limit - ulen(text)) * ' '


def display(songs, width=None):
    if width is None:
        width = float('infinity')
    fields = ['title', 'artist', 'album']
    widths = [0] * len(fields)

    def row(i, song):
        result = [str(i)]
        for f, field in enumerate(fields):
            if field in song:
                value = song[field].replace('\n', ', ')
                result.append(value)
                widths[f] = max(widths[f], ulen(value))
            else:
                result.append('')
        return result

    rows = [row(i, song) for i, song in enumerate(songs)]

    widths.insert(0, len(str(len(songs))))
    remaining = width - 2 * (len(widths) - 1)

    for c in range(len(widths)):
        if c == len(widths) - 1:
            widths[c] = min(widths[c], remaining)
        else:
            widths[c] = min(widths[c], remaining // 2)
        remaining -= widths[c]

    def trimpad(text, limit, right=False):
        if ulen(text) > limit:
            text = usubstr(text, limit - 1) + 'â€¦'
        if right:
            return text.rjust(limit)
        return uljust(text, limit)

    for r in rows:
        print('  '.join(trimpad(c, widths[i], i == 0) for i, c in enumerate(r)))


def limit(generator, limit=10):
    return list(itertools.islice(generator, limit))


if __name__ == '__main__':
    # appears unused, but makes raw_input much nicer
    import readline  # noqa: F401
    from quodlibet.remote import Remote

    songs = load()

    sz = get_terminal_size()
    match = limit(songs, sz.lines - 1)
    display(match, sz.columns)
    while True:
        try:
            s = input('> ')
        except (EOFError, KeyboardInterrupt):
            print()
            break
        # ' 1234' will search for 1234, not queue song 1234
        if s.isdigit():
            n = int(s)
            if n >= len(match):
                print('IndexError: list index out of range')
            else:
                Remote.send_message('play-file ' + match[n]['~filename'])
            continue
        sz = get_terminal_size()
        match = limit(search(s), sz.lines - 1)
        display(match, sz.columns)
